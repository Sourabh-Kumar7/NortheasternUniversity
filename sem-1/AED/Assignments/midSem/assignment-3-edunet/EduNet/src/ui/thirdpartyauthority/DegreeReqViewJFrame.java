/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui.thirdpartyauthority;

import java.util.Map;
import model.Course;
import model.CourseProgress;
import model.DataManager;
import model.Student;
import model.StudentCourseProgress;
import model.User;

/**
 *
 * @author sourabhkumar
 */
public class DegreeReqViewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form DegreeReqViewJFrame
     */
    ThirdPartyDegreeAuthorityPortal parentFrame;
    User u;
    Student student;
    public DegreeReqViewJFrame(ThirdPartyDegreeAuthorityPortal parentFrame, User u) {
        this.u = u;
        this.parentFrame = parentFrame;
        this.student = DataManager.studentMap.get(u.getId());
        initComponents();
        populateData();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE); // Set close operation

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titlerequesttranscript = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtStudentID = new javax.swing.JTextField();
        txtStudentName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        courseListTxtArea = new javax.swing.JTextArea();
        btnSave = new javax.swing.JButton();
        jDegreeStatusComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titlerequesttranscript.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        titlerequesttranscript.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titlerequesttranscript.setText("DEGREE REQUEST VIEW");

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Student ID");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Student Name");

        txtStudentID.setEditable(false);
        txtStudentID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStudentIDActionPerformed(evt);
            }
        });

        txtStudentName.setEditable(false);
        txtStudentName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStudentNameActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Completed Courses");

        courseListTxtArea.setEditable(false);
        courseListTxtArea.setColumns(20);
        courseListTxtArea.setRows(5);
        jScrollPane1.setViewportView(courseListTxtArea);

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jDegreeStatusComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Review In Progress", "Rejected", "Approved" }));

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Degree Status");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titlerequesttranscript, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1))
                            .addGap(68, 68, 68)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtStudentID, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                                .addComponent(txtStudentName)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jDegreeStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jDegreeStatusComboBox, txtStudentID, txtStudentName});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3, jLabel4});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(titlerequesttranscript, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(txtStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDegreeStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(33, 33, 33)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(184, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jDegreeStatusComboBox, jLabel1, jLabel2, jLabel3, jLabel4, txtStudentID, txtStudentName});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtStudentIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStudentIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStudentIDActionPerformed

    private void txtStudentNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStudentNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStudentNameActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // Retrieve the selected degree status value from jDegreeStatusComboBox
        String degreeStatusValue = (String) jDegreeStatusComboBox.getSelectedItem();

        // Check if the degree status is "Approved" or "Rejected"
        if (degreeStatusValue.equals("Approved") || degreeStatusValue.equals("Rejected")) {
            // Check if the student's ID is in the requestForDegree list
            if (DataManager.requestForDegree.contains(u.getId())) {
                // Remove the student from DataManager.requestForDegree
                DataManager.requestForDegree.remove((Integer) u.getId());

                // Set the student's degree status
                this.student.setDegreeStatus(degreeStatusValue);

                // Close the current frame
                this.dispose();

                // Reload data in the parent frame's table and make it visible
                this.parentFrame.loadDataInTable();
                this.parentFrame.setVisible(true);

                // Display an appropriate message
                javax.swing.JOptionPane.showMessageDialog(this, "Degree status updated successfully.");
            } else {
                // Display an error message if the student is not in the requestForDegree list
                javax.swing.JOptionPane.showMessageDialog(this, "Student not found in the request list.");
            }
        } else {
            // Display an error message if the degree status is not "Approved" or "Rejected"
            javax.swing.JOptionPane.showMessageDialog(this, "Invalid degree status selected.");
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JTextArea courseListTxtArea;
    private javax.swing.JComboBox<String> jDegreeStatusComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel titlerequesttranscript;
    private javax.swing.JTextField txtStudentID;
    private javax.swing.JTextField txtStudentName;
    // End of variables declaration//GEN-END:variables

    private void populateData() {
        // Check if the user (student) object 'u' is not null
        if (u != null) {
            // Set the student ID and name fields
            txtStudentID.setText(Integer.toString(u.getId())); // Assuming that u.getId() returns the student's ID as an integer
            txtStudentName.setText(u.getName()); // Assuming that u.getName() returns the student's name

            // Fill the list of completed courses
            StudentCourseProgress studentProgress = DataManager.studentCourseProgressMap.get(u.getId());
            if (studentProgress != null) {
                StringBuilder completedCoursesText = new StringBuilder();
                for (Map.Entry<Integer, CourseProgress> entry : studentProgress.getCourseProgressMap().entrySet()) {
                    if (entry.getValue().isCompleted()) {
                        Course course = DataManager.courseMap.get(entry.getKey());
                        if (course != null) {
                            completedCoursesText.append(course.getCourseName()).append("\n");
                        }
                    }
                }
                courseListTxtArea.setText(completedCoursesText.toString());
            }
        }
    }
}
