/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui.admin;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Course;
import static model.DataManager.courseMap;
import model.User;

/**
 *
 * @author SAI BHAVANESH
 */
public class ListCourseJFrame extends javax.swing.JFrame {

    /**
     * Creates new form CourseJFrame
     */
    User u;
    public ListCourseJFrame(User u) {
        this.u = u;
        initComponents();
        loadCourseListTable();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE); // Set close operation
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

        // Calculate the position to be at the lower right corner
        int x = screenSize.width - getWidth();
        int y = screenSize.height - getHeight();
        setLocation(x, y);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                AdminPortalJFrame adminFrame = new AdminPortalJFrame(u);
                adminFrame.setVisible(true);
                dispose(); // Close the second frame
            }
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        courseListTable = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        lblCourseID = new javax.swing.JLabel();
        txtCourseID = new javax.swing.JTextField();
        lblProfessorName = new javax.swing.JLabel();
        txtProfessorID = new javax.swing.JTextField();
        lblYear = new javax.swing.JLabel();
        txtYear = new javax.swing.JTextField();
        lblSemester = new javax.swing.JLabel();
        SemesterComboBox = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Course Management");

        courseListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Course ID", "Professor", "Year", "Sem", "Total Enrollment"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(courseListTable);

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        lblCourseID.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCourseID.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCourseID.setText("Course ID");

        lblProfessorName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblProfessorName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblProfessorName.setText("Professor ID");

        lblYear.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblYear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblYear.setText("Year");

        lblSemester.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblSemester.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSemester.setText("Semester");

        SemesterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Spring", "Summer", "Fall" }));

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnView, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblCourseID)
                                    .addComponent(lblProfessorName, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtProfessorID, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                                    .addComponent(txtCourseID))
                                .addGap(293, 293, 293))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(299, 299, 299)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lblYear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblSemester, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(12, 12, 12)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtYear)
                                            .addComponent(SemesterComboBox, 0, 127, Short.MAX_VALUE)))
                                    .addComponent(btnSearch, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addGap(1, 1, 1)))
                .addGap(42, 42, 42))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblCourseID, lblProfessorName, lblSemester, lblYear});
        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {SemesterComboBox, txtCourseID, txtProfessorID, txtYear});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(lblTitle)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCourseID)
                            .addComponent(txtCourseID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblProfessorName)
                            .addComponent(txtProfessorID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblYear, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSemester)
                            .addComponent(SemesterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(btnSearch)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnView)
                .addContainerGap(7, Short.MAX_VALUE))
        );
        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {SemesterComboBox, btnSearch, lblCourseID, lblProfessorName, lblSemester, lblYear, txtCourseID, txtProfessorID, txtYear});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        loadCourseListTable();
    }//GEN-LAST:event_btnSearchActionPerformed
    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        // Get the selected row from the table
        int selectedRow = courseListTable.getSelectedRow();

        if (selectedRow != -1) {
            // Get the course ID from the selected row
            int courseID = (int) courseListTable.getValueAt(selectedRow, 0);

            // Retrieve the course object based on the course ID
            Course selectedCourse = courseMap.get(courseID);

            if (selectedCourse != null) {
                // Open the ViewCourseJFrame and pass the selected course object
                dispose();
                ViewCourseJFrame courseFrame = new ViewCourseJFrame(selectedCourse, u);
                courseFrame.setVisible(true);
            } else {
                // Handle the case where the selected course was not found
                showErrorMessage("Selected course not found.");
            }
        } else {
            // Handle the case where no course is selected
            showErrorMessage("Please select a course to view.");
        }
    }//GEN-LAST:event_btnViewActionPerformed
    private void showErrorMessage(String message) {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> SemesterComboBox;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnView;
    private javax.swing.JTable courseListTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCourseID;
    private javax.swing.JLabel lblProfessorName;
    private javax.swing.JLabel lblSemester;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblYear;
    private javax.swing.JTextField txtCourseID;
    private javax.swing.JTextField txtProfessorID;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables

    private void loadCourseListTable() {
        // Get filter criteria from input fields
        String courseID = txtCourseID.getText();
        String professorID = txtProfessorID.getText();
        String year = txtYear.getText();
        String selectedSemester = SemesterComboBox.getSelectedItem().toString();

        // Your logic to retrieve course data based on the filter criteria
        List<Course> filteredCourses = filterCourses(courseID, professorID, year, selectedSemester);
        
        // Create a table model to display the data
        DefaultTableModel model = (DefaultTableModel) courseListTable.getModel();
        model.setRowCount(0); // Clear existing table data
        
        // Populate the table with course data
        for (Course course : filteredCourses) {
            Object[] rowData = {
                course.getCourseId(),
                course.getInstructorID(),
                course.getYear(),
                course.getSemester(),
                course.getCountEnrolledStudents()
            };
            model.addRow(rowData);
        }
    }
    public static List<Course> filterCourses(String courseID, String professorID, String year, String semester) {
        List<Course> filteredCourses = new ArrayList<>();
        for (Course course : courseMap.values()) {
            // Check if the course matches the filter criteria
            if ((courseID.isEmpty() || Integer.toString(course.getCourseId()).equals(courseID)) &&
                (professorID.isEmpty() || Integer.toString(course.getInstructorID()).equals(professorID)) &&
                (year.isEmpty() || Integer.toString(course.getYear()).equals(year)) &&
                (semester.equals("All") || course.getSemester().equalsIgnoreCase(semester))) {
                filteredCourses.add(course);
            }
        }
        return filteredCourses;
    }
}
