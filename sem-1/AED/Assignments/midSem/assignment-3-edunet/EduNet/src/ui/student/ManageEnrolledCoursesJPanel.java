/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.student;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Course;
import model.CourseProgress;
import model.DataManager;
import static model.DataManager.studentCourseProgressMap;
import static model.DataManager.studentMap;
import static model.DataManager.userMap;
import model.Student;
import model.StudentCourseProgress;
import model.StudentFeedback;
import model.StudentQuery;
import model.User;

/**
 *
 * @author saatw
 */
public class ManageEnrolledCoursesJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageEnrolledCoursesJPanel
     */
    User u;
    Student s;
    private StudentPortalJFrame studentPortalFrame;

    public ManageEnrolledCoursesJPanel(User u, StudentPortalJFrame frame) {
        this.u = u;
        this.s = studentMap.get(u.getId());
        this.studentPortalFrame = frame; // Store a reference to the frame
        initComponents();
        loadEnrolledCoursesTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleenrolledcourses = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnDropCourse = new javax.swing.JButton();
        btnview = new javax.swing.JButton();

        titleenrolledcourses.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        titleenrolledcourses.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleenrolledcourses.setText("Enrolled Courses");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Course ID", "Course Name", "Professor", "Semester", "Year", "Rating"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            
            }
        });
        jScrollPane1.setViewportView(jTable1);

        btnDropCourse.setText("Drop Course");
        btnDropCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDropCourseActionPerformed(evt);
            }
        });

        btnview.setText("View Course Progress");
        btnview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnviewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titleenrolledcourses, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDropCourse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(33, 33, 33)
                .addComponent(btnview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(16, 16, 16))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnDropCourse, btnview});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titleenrolledcourses, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnview)
                    .addComponent(btnDropCourse))
                .addGap(18, 18, 18))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnDropCourse, btnview});

    }// </editor-fold>//GEN-END:initComponents

    private void btnviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnviewActionPerformed
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            // No row selected, show an error message
            JOptionPane.showMessageDialog(this, "Please select a course to view its progress.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // Get the course ID from the selected row
            int courseId = (int) jTable1.getValueAt(selectedRow, 0);

            // Check if the student is enrolled in the selected course
            if (s.getEnrolledCoursesId().contains(courseId)) {
                // Retrieve student's course progress for the selected course
                StudentCourseProgress studentCourseProgress = studentCourseProgressMap.get(u.getId());
                CourseProgress selectedCourseProgress = studentCourseProgress.getCourseProgress(courseId);
                studentPortalFrame.dispose();
                if (selectedCourseProgress != null) {
                    // Open the CourseProgressFrame
//                    dispose();
                    CourseProgressFrame courseProgressFrame = new CourseProgressFrame(selectedCourseProgress, courseId, u);
                    courseProgressFrame.setVisible(true);
                } else {
                    // Show an error message if there is no course progress data
                    JOptionPane.showMessageDialog(this, "No progress data available for this course.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                // Show an error message if the student is not enrolled in the selected course
                JOptionPane.showMessageDialog(this, "You are not enrolled in the selected course.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnviewActionPerformed

    private void btnDropCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDropCourseActionPerformed
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            // No row selected, show an error message
            JOptionPane.showMessageDialog(this, "Please select a course to drop.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // Get the course ID from the selected row
            int courseId = (int) jTable1.getValueAt(selectedRow, 0);

            // Check if the student is enrolled in the selected course
            if (s.getEnrolledCoursesId().contains(courseId)) {
                // Remove the course from the student's enrolled courses
                s.removeEnrolledCourse(courseId);

                // Decrement the countEnrolledStudents of the course
                Course course = DataManager.courseMap.get(courseId);
                if (course != null) {
                    course.decrementEnrolledStudents();

                    // Remove the student's feedback for the course
                    List<StudentFeedback> studentFeedbackList = DataManager.courseFeedbackMap.get(courseId);
                    if (studentFeedbackList != null) {
                        // Remove the feedback provided by the student
                        studentFeedbackList.removeIf(feedback -> feedback.getStudentId() == s.getUserId());

                        // Recalculate the course rating based on existing feedback
                        updateCourseRating(courseId);
                    }

                    // Remove student's queries related to this course
                    List<StudentQuery> studentQueries = DataManager.studentQueryMap.get(s.getUserId());
                    if (studentQueries != null) {
                        studentQueries.removeIf(query -> query.getCourseId() == courseId);

                        // Remove queries related to this course from professorQueryMap
                        for (StudentQuery query : studentQueries) {
                            DataManager.professorQueryMap.get(query.getProfessorId())
                                    .removeIf(q -> q.getStudentId() == s.getUserId() && q.getCourseId() == courseId);
                        }
                    }

                    // Remove course progress information
                    DataManager.studentCourseProgressMap.remove(s.getUserId(), courseId);

                    // Refresh the enrolled courses table
                    loadEnrolledCoursesTable();
                } else {
                    // Show an error message if the course doesn't exist
                    JOptionPane.showMessageDialog(this, "Selected course does not exist.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                // Show an error message if the student is not enrolled in the selected course
                JOptionPane.showMessageDialog(this, "You are not enrolled in the selected course.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnDropCourseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDropCourse;
    private javax.swing.JButton btnview;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel titleenrolledcourses;
    // End of variables declaration//GEN-END:variables

    private void loadEnrolledCoursesTable() {
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
        tableModel.setRowCount(0); // Clear existing data in the table

        for (int courseId : s.getEnrolledCoursesId()) {
            Course course = model.DataManager.courseMap.get(courseId);
            if (course != null) {
                // Add course details to the table
                Object[] rowData = {
                    course.getCourseId(),
                    course.getCourseName(),
                    getProfessorName(course.getInstructorID()), // Implement getProfessorName method
                    course.getSemester(),
                    course.getYear(),
                    course.getRating()
                };
                tableModel.addRow(rowData);
            }
        }
    }
    
    private String getProfessorName(int instructorID) {
        User p = userMap.get(instructorID);
        return p.getName(); // Change this to the actual professor's name.
    }
    
    private void updateCourseRating(int courseId) {
        List<StudentFeedback> studentFeedbackList = DataManager.courseFeedbackMap.get(courseId);

        if (studentFeedbackList != null && !studentFeedbackList.isEmpty()) {
            int totalRating = 0;
            int totalFeedbackCount = studentFeedbackList.size();

            // Calculate the total rating based on existing feedback
            for (StudentFeedback feedback : studentFeedbackList) {
                totalRating += feedback.getRating();
            }

            // Calculate the new average rating
            int newRating = totalRating / totalFeedbackCount;

            // Update the course's rating
            Course course = DataManager.courseMap.get(courseId);
            if (course != null) {
                course.setRating(newRating);

                // Remove the old feedback entries
                DataManager.courseFeedbackMap.remove(courseId);
            }
        }
    }

}
