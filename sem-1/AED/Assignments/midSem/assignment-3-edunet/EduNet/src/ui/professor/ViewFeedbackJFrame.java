/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui.professor;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Course;
import model.DataManager;
import model.Professor;
import model.StudentFeedback;
import model.User;

/**
 *
 * @author sourabhkumar
 */
public class ViewFeedbackJFrame extends javax.swing.JFrame {

    /**
     * Creates new form ViewFeedbackJFrame
     */
    Professor p;
    User u;
    public ViewFeedbackJFrame(Professor p, User u) {
        this.u = u;
        this.p = p;
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE); // Set close operation
        loadFeedbackData();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

        // Calculate the position to be at the top right corner
        int x = screenSize.width - getWidth();
        int y = 0;

        setLocation(x, y);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                ProfessorPortalJFrame profPortal = new ProfessorPortalJFrame(u);
                profPortal.setVisible(true);
                dispose(); // Close the second frame
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCourseRating = new javax.swing.JTable();
        btnView = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(600, 600));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Course Feedback & Ratings");

        jTableCourseRating.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Course ID", "Course Name", "Overall Rating"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableCourseRating);

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnView)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(191, 191, 191)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(60, 60, 60)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(btnView)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTableCourseRating.getSelectedRow();
        if (selectedRow >= 0) {
            int courseId = (int) jTableCourseRating.getValueAt(selectedRow, 0);
            dispose();
            ViewFeedBackRatingJFrame feedbackRatingFrame = new ViewFeedBackRatingJFrame(courseId, p, u);
            feedbackRatingFrame.setVisible(true);
        } else {
            // Display an error message using JOptionPane
            JOptionPane.showMessageDialog(this, "Please select a course to view feedback.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnViewActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableCourseRating;
    // End of variables declaration//GEN-END:variables
    private void loadFeedbackData() {
        DefaultTableModel model = (DefaultTableModel) jTableCourseRating.getModel();
        model.setRowCount(0); // Clear the table

        List<Integer> createdCourseIds = p.getCreatedCourseIds();

        // Create a map to store the overall ratings for each course
        Map<Integer, Double> courseOverallRatingMap = new HashMap<>();

        // Iterate through the created course IDs
        for (Integer courseId : createdCourseIds) {
            // Fetch the course details using the courseId
            Course course = DataManager.courseMap.get(courseId);

            if (course != null) {
                String courseName = course.getCourseName();

                // Get the list of feedback for the course from courseFeedbackMap
                List<StudentFeedback> feedbackList = DataManager.courseFeedbackMap.get(courseId);

                // Check if there is any feedback for the course
                if (feedbackList != null && !feedbackList.isEmpty()) {
                    // Calculate the overall rating for the course based on feedback
                    double overallRating = calculateOverallRating(feedbackList);

                    // Add course data to the table
                    model.addRow(new Object[]{courseId, courseName, overallRating});

                    // Store the overall rating in the courseOverallRatingMap
                    courseOverallRatingMap.put(courseId, overallRating);
                }
            }
        } 
    }
    
    private double calculateOverallRating(List<StudentFeedback> feedbackList) {
        if (feedbackList == null || feedbackList.isEmpty()) {
            return 0.0; // No feedback, return 0 as the overall rating.
        }

        double totalRating = 0.0;
        for (StudentFeedback feedback : feedbackList) {
            totalRating += feedback.getRating();
        }
        return totalRating / feedbackList.size();
    }
    
    
}
