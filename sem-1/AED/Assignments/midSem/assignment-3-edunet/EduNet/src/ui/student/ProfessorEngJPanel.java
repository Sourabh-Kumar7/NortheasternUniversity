/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.student;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Course;
import model.DataManager;
import static model.DataManager.studentMap;
import model.StudentQuery;
import model.User;
import ui.ViewUserDetailsJFrame;

/**
 *
 * @author sourabhkumar
 */
public class ProfessorEngJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ProfessorEngJPanel
     */
    User u;
    private StudentPortalJFrame studentPortalFrame;

    public ProfessorEngJPanel(User u, StudentPortalJFrame frame) {
        this.u = u;
        this.studentPortalFrame = frame;
        initComponents();
        loadStudentQueryTable(u.getId(), -1, -1);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnView = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jQueryTable = new javax.swing.JTable();
        txtProfessorID = new javax.swing.JTextField();
        txtCourseID = new javax.swing.JTextField();
        lblProfessorID = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnCreateQuery = new javax.swing.JButton();

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jQueryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Course ID", "Course Name", "Professor ID", "Query Title"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jQueryTable);

        lblProfessorID.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblProfessorID.setText("Professor ID");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Course ID");

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Professor Engagement");

        btnCreateQuery.setText("Create Query");
        btnCreateQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateQueryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProfessorID, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtCourseID)
                    .addComponent(txtProfessorID, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSearch)
                .addGap(67, 67, 67))
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCreateQuery)
                        .addGap(51, 51, 51)
                        .addComponent(btnView))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(203, 203, 203))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, lblProfessorID});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtCourseID, txtProfessorID});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCourseID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblProfessorID, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtProfessorID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearch)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnView)
                    .addComponent(btnCreateQuery))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel2, lblProfessorID, txtCourseID, txtProfessorID});

    }// </editor-fold>//GEN-END:initComponents

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        int selectedRow = jQueryTable.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a query to view.", "Selection Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int queryId = (int) jQueryTable.getValueAt(selectedRow, 0);
            StudentQuery query = DataManager.queryMap.get(queryId);

            if (query == null) {
                JOptionPane.showMessageDialog(this, "The selected query was not found.", "Query Not Found", JOptionPane.ERROR_MESSAGE);
            } else {
                // Open a view dialog for the selected query
                studentPortalFrame.dispose();
                ViewQueryJFrame viewQueryDialog = new ViewQueryJFrame(query, u);
                viewQueryDialog.setVisible(true);
            }
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // Get the filter values from the text fields
        String courseFilter = txtCourseID.getText().trim();
        String professorFilter = txtProfessorID.getText().trim();

        try {
            // Attempt to convert filter values to integers
            int courseIdFilter = courseFilter.isEmpty() ? -1 : Integer.parseInt(courseFilter);
            int professorIdFilter = professorFilter.isEmpty() ? -1 : Integer.parseInt(professorFilter);

            // Call the loadStudentQueryTable method with the filter values
            loadStudentQueryTable(u.getId(), courseIdFilter, professorIdFilter);
        } catch (NumberFormatException e) {
            // Handle the case where the input cannot be parsed as integers
            // Display an error message to the user
            JOptionPane.showMessageDialog(this, "Please enter valid integer values for Course ID and Professor ID.", "Input Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnCreateQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateQueryActionPerformed
        // TODO add your handling code here:
        studentPortalFrame.dispose();
        CreateQueryFrame createQuery = new CreateQueryFrame(this.u);
        createQuery.setVisible(true);
    }//GEN-LAST:event_btnCreateQueryActionPerformed
    
    public void loadStudentQueryTable(int studentId, int courseIdFilter, int professorIdFilter) {
        DefaultTableModel model = (DefaultTableModel) jQueryTable.getModel();
        model.setRowCount(0); // Clear existing data
        List<StudentQuery> studentQueries = DataManager.studentQueryMap.get(studentId);

        if (studentQueries != null){
            for (StudentQuery query : studentQueries) {
                if ((courseIdFilter == -1 || query.getCourseId() == courseIdFilter)
                        && (professorIdFilter == -1 || query.getProfessorId() == professorIdFilter)) {
                    Course course = DataManager.courseMap.get(query.getCourseId());
                    if (course != null) {
                        model.addRow(new Object[]{
                            query.getQueryId(),
                            course.getCourseName(),
                            query.getProfessorId(),
                            query.getQueryTitle()
                        });
                    }
                }
            }
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateQuery;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTable jQueryTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblProfessorID;
    private javax.swing.JTextField txtCourseID;
    private javax.swing.JTextField txtProfessorID;
    // End of variables declaration//GEN-END:variables
}
