/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui.professor;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Course;
import model.DataManager;
import model.Professor;
import model.User;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import ui.GraphPlotter;

/**
 *
 * @author sourabhkumar
 */
public class EarningMngJFrame extends javax.swing.JFrame {

    /**
     * Creates new form EarningMngJFrame
     */
    Professor p;
    User u;
    public EarningMngJFrame(Professor p, User u) {
        this.u = u;
        this.p = p;
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE); // Set close operation
        loadCourseData();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

        // Calculate the position to be at the top right corner
        int x = screenSize.width - getWidth();
        int y = 0;

        setLocation(x, y);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                ProfessorPortalJFrame profPortal = new ProfessorPortalJFrame(u);
                profPortal.setVisible(true);
                dispose(); // Close the second frame
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEarnMng = new javax.swing.JTable();
        lblTotalEarning = new javax.swing.JLabel();
        txtTotalEarning = new javax.swing.JTextField();
        btnViewChart = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(600, 600));

        lblTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Earning Management");

        jTableEarnMng.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Course ID", "Course Name", "Earning"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableEarnMng);

        lblTotalEarning.setText("Total Earning");

        txtTotalEarning.setEditable(false);

        btnViewChart.setText("View Chart");
        btnViewChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewChartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(214, 214, 214)
                            .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(24, 24, 24)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(btnViewChart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTotalEarning, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTotalEarning, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotalEarning, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotalEarning, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewChart))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblTotalEarning, txtTotalEarning});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewChartActionPerformed
        // TODO add your handling code here:
        // Create a dataset
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        // Populate the dataset with your course revenue data
        for (int row = 0; row < jTableEarnMng.getRowCount(); row++) {
            String courseName = (String) jTableEarnMng.getValueAt(row, 1); // Assuming column 1 is the course name
            double revenue = (Double) jTableEarnMng.getValueAt(row, 2); // Assuming column 2 is the revenue
            dataset.addValue(revenue, "Revenue", courseName);
        }

        // Create the chart
        JFreeChart barChart = ChartFactory.createBarChart(
            "Course Revenue",
            "Course",
            "Revenue",
            dataset,
            PlotOrientation.VERTICAL,
            true,
            true,
            false
        );

        // Create a chart panel and display it
        JPanel chartPanel = new ChartPanel(barChart);
        chartPanel.setPreferredSize(new java.awt.Dimension(800, 600));

        JFrame chartFrame = new GraphPlotter("Course Revenue Chart");
        chartFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        chartFrame.setContentPane(chartPanel);
        chartFrame.pack();
        chartFrame.setVisible(true);
    }//GEN-LAST:event_btnViewChartActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnViewChart;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableEarnMng;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotalEarning;
    private javax.swing.JTextField txtTotalEarning;
    // End of variables declaration//GEN-END:variables
    
    private void loadCourseData() {
        DefaultTableModel model = (DefaultTableModel) jTableEarnMng.getModel();
        model.setRowCount(0); // Clear the table

        double totalEarning = 0.0; // Initialize the total earning

        // Get the list of course IDs created by the professor
        List<Integer> createdCourseIds = p.getCreatedCourseIds();

        for (Integer courseId : createdCourseIds) {
            // Fetch the course details using the courseId
            Course course = DataManager.courseMap.get(courseId);

            if (course != null) {
                String courseName = course.getCourseName();
                double courseFees = course.getCourseFees();
                int enrolledStudents = course.getCountEnrolledStudents();
                double revenue = courseFees * enrolledStudents;

                // Add course data to the table
                model.addRow(new Object[]{courseId, courseName, revenue});

                // Update the total earning
                totalEarning += revenue;
            }
        }

        // Set the total earning in the text field (non-editable)
        txtTotalEarning.setText(String.valueOf(totalEarning));
        txtTotalEarning.setEditable(false);
    }
}
