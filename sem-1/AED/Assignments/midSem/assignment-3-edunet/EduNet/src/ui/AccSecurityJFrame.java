/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JOptionPane;
import model.CustomExceptions;
import model.HashingUtil;
import model.User;
import static model.validationUtil.validatePassword;
import ui.admin.AdminPortalJFrame;
import ui.professor.ProfessorPortalJFrame;
import ui.student.StudentPortalJFrame;

/**
 *
 * @author sourabhkumar
 */
public class AccSecurityJFrame extends javax.swing.JFrame {

    /**
     * Creates new form AccSecurityJFrame
     */
    User u;
    public AccSecurityJFrame(User u) {
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE); // Set close operation
        this.u = u;
        loadAccountSecurityData();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

        // Calculate the position to be at the top right corner
        int x = screenSize.width - getWidth();
        int y = 0;

        setLocation(x, y);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                switch (u.getUserType()) {
                    case "Professor" -> {
                        ProfessorPortalJFrame profPortal = new ProfessorPortalJFrame(u);
                        profPortal.setVisible(true);
                   
                    }
                    case "Student" -> {
                        StudentPortalJFrame studPortal = new StudentPortalJFrame(u);
                        studPortal.setVisible(true);
                    }
                    default -> {
                        AdminPortalJFrame adminPortal = new AdminPortalJFrame(u);
                        adminPortal.setVisible(true);
                   
                    }
                }
                dispose(); // Close the second frame
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtConfirmNewPasswd = new javax.swing.JPasswordField();
        txtCurrPassword = new javax.swing.JPasswordField();
        rShowPassword = new javax.swing.JRadioButton();
        lblCurrPassword = new javax.swing.JLabel();
        lblNewPassword = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        lblConfirmNewPassword = new javax.swing.JLabel();
        txtNewPassword = new javax.swing.JPasswordField();
        txtEmail = new javax.swing.JPasswordField();
        lblEmail = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(600, 600));
        setSize(new java.awt.Dimension(600, 600));

        rShowPassword.setText("Show Password");
        rShowPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rShowPasswordActionPerformed(evt);
            }
        });

        lblCurrPassword.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCurrPassword.setText("Current Password");

        lblNewPassword.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNewPassword.setText("New Password");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lblConfirmNewPassword.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblConfirmNewPassword.setText("Confirm New Password");

        txtEmail.setEditable(false);

        lblEmail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEmail.setText("Email");

        lblTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Account Security");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(119, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSave)
                    .addComponent(rShowPassword)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblEmail)
                            .addComponent(lblConfirmNewPassword)
                            .addComponent(lblNewPassword)
                            .addComponent(lblCurrPassword))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCurrPassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNewPassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtConfirmNewPasswd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(99, 99, 99))
            .addGroup(layout.createSequentialGroup()
                .addGap(222, 222, 222)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtConfirmNewPasswd, txtCurrPassword, txtNewPassword});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblConfirmNewPassword, lblCurrPassword, lblEmail, lblNewPassword});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCurrPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCurrPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNewPassword))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtConfirmNewPasswd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblConfirmNewPassword))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rShowPassword)
                .addGap(32, 32, 32)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(160, 160, 160))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblConfirmNewPassword, lblCurrPassword, lblEmail, lblNewPassword, txtConfirmNewPasswd, txtCurrPassword, txtNewPassword});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rShowPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rShowPasswordActionPerformed
        // TODO add your handling code here:
        boolean showPassword = rShowPassword.isSelected();
        txtCurrPassword.setEchoChar(showPassword ? '\u0000' : '*');
        txtNewPassword.setEchoChar(showPassword ? '\u0000' : '*');
        txtConfirmNewPasswd.setEchoChar(showPassword ? '\u0000' : '*');
    }//GEN-LAST:event_rShowPasswordActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        String currentPassword = new String(txtCurrPassword.getPassword()); // Get the password from JPasswordField
        String newPassword = new String(txtNewPassword.getPassword()); // Get the password from JPasswordField
        String confirmNewPassword = new String(txtConfirmNewPasswd.getPassword()); // Get the password from JPasswordField

        // Check if any of the password fields are empty
        if (currentPassword.isEmpty() || newPassword.isEmpty() || confirmNewPassword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All password fields must be filled.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Hash the current password
        String currentPasswordHash = HashingUtil.hashString(currentPassword);

        // Check if the obtained hash matches the stored password hash
        if (!currentPasswordHash.equals(u.getHashedPassword())) {
            // Passwords don't match, display an error message
            JOptionPane.showMessageDialog(this, "Incorrect current password.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate the new password (add your validation logic here)
        try {
            validatePassword(newPassword);
        } catch (CustomExceptions.InvalidPasswordException e) {
            JOptionPane.showMessageDialog(this, "Invalid password. Password should meet certain criteria.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method
        }

        // Check if the new password is the same as the old password
        if (currentPasswordHash.equals(HashingUtil.hashString(newPassword))) {
            JOptionPane.showMessageDialog(this, "New password cannot be the same as the old password.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if the new password and confirm new password match
        if (!newPassword.equals(confirmNewPassword)) {
            JOptionPane.showMessageDialog(this, "New password and confirm password do not match.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // If everything is alright, update the user's password and display a success message
        u.setHashedPassword(HashingUtil.hashString(newPassword));
        JOptionPane.showMessageDialog(this, "Password changed successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

        // Clear the password fields
        txtCurrPassword.setText("");
        txtNewPassword.setText("");
        txtConfirmNewPasswd.setText("");
    }//GEN-LAST:event_btnSaveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel lblConfirmNewPassword;
    private javax.swing.JLabel lblCurrPassword;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblNewPassword;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JRadioButton rShowPassword;
    private javax.swing.JPasswordField txtConfirmNewPasswd;
    private javax.swing.JPasswordField txtCurrPassword;
    private javax.swing.JPasswordField txtEmail;
    private javax.swing.JPasswordField txtNewPassword;
    // End of variables declaration//GEN-END:variables

    private void loadAccountSecurityData() {
        if(u!=null){
            txtEmail.setText(u.getEmail());
            return;
        }
        JOptionPane.showMessageDialog(this, "User Not Found", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
