/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.Customer;

import DataManagement.DataManager;
import ProductManagement.Product;
import TheBusiness.MarketModel.Bundle;
import TheBusiness.MarketModel.Channel;
import TheBusiness.MarketModel.Market;
import TheBusiness.Personnel.Customer;
import java.awt.Color;
import java.awt.Point;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nidhisamarth
 */
public class LetsShopJPanel extends javax.swing.JPanel {

    /**
     * Creates new form LetsShop
     */
    javax.swing.JFrame parentFrame;
    Customer customer;
    public LetsShopJPanel(JFrame parentFrame, Customer customer) {
        this.customer = customer;
        this.parentFrame = parentFrame;
        initComponents();
        loadChannel();
        Color lightBlue = new Color(173, 216, 230);
        setBackground(lightBlue);  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ComboManageMarkets = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtCustomerChannel = new javax.swing.JTextField();

        ComboManageMarkets.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Market 1", "Market 2", "Market 3" }));
        ComboManageMarkets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboManageMarketsActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bundle ID", "Bundle Name", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        btnView.setText("View Bundle");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Channel");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Market");

        txtCustomerChannel.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnView)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ComboManageMarkets, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtCustomerChannel, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(52, 52, 52))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ComboManageMarkets, txtCustomerChannel});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCustomerChannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboManageMarkets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ComboManageMarkets, jLabel1, jLabel2, txtCustomerChannel});

    }// </editor-fold>//GEN-END:initComponents

    private void ComboManageMarketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboManageMarketsActionPerformed
        // TODO add your handling code here:
        String selectedMarketName = (String) ComboManageMarkets.getSelectedItem();
        loadBundlesForMarket(selectedMarketName);
    }//GEN-LAST:event_ComboManageMarketsActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // Check if a row is selected
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            // No row is selected
            JOptionPane.showMessageDialog(this, "Please select a bundle to view.", "No Selection", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Assuming the first column of the table contains the Bundle ID
        Integer bundleId = (Integer) jTable1.getValueAt(selectedRow, 0);

        // Find the selected bundle
        Bundle selectedBundle = DataManager.bundleCatalog.get(bundleId);
        if (selectedBundle == null) {
            // Bundle not found
            JOptionPane.showMessageDialog(this, "Selected bundle not found.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Proceed to show the bundle details
        Point parentFramePosition = this.parentFrame.getLocation();
        this.parentFrame.setVisible(false);

        ViewBundleJFrame viewBundle = new ViewBundleJFrame(this.parentFrame, selectedBundle, this.customer);
        viewBundle.setLocation(parentFramePosition);
        viewBundle.setVisible(true);
    }//GEN-LAST:event_btnViewActionPerformed
    
    private void loadChannel() {
        if (DataManager.channelDirectory.containsKey(customer.getChannelId())) {
            Channel customerChannel = DataManager.channelDirectory.get(customer.getChannelId());
            txtCustomerChannel.setText(customerChannel.getName());
            loadMarketsForChannel(customerChannel.getChannelId());
        }
    }
    
    private void loadMarketsForChannel(int channelId) {
        ComboManageMarkets.removeAllItems();
        Channel channel = DataManager.channelDirectory.get(channelId);
        for (Integer marketId : channel.getMarketIds()) {
            Market market = DataManager.marketCatalog.get(marketId);
            if (market != null) {
                ComboManageMarkets.addItem(market.getName());
            }
        }

        // Load bundles for the first selected market
        if (ComboManageMarkets.getItemCount() > 0) {
            loadBundlesForMarket(ComboManageMarkets.getItemAt(0));
        }
    }
    
    
    private void loadBundlesForMarket(String marketName) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear existing data

        for (Bundle bundle : DataManager.bundleCatalog.values()) {
            Market market = DataManager.marketCatalog.get(bundle.getMarketId());
            if (market != null && market.getName().equals(marketName)) {
                double totalPrice = calculateBundlePrice(bundle); // Method to calculate the total price
                int quantity = bundle.getProductIds().size(); // Example of getting quantity
                model.addRow(new Object[]{bundle.getId(), bundle.getName(), quantity, totalPrice});
            }
        }
    }

    private double calculateBundlePrice(Bundle bundle) {
        double price = 0;
        for (Integer productId : bundle.getProductIds()) {
            Product product = DataManager.productCatalog.get(productId);
            if (product != null) {
                price += product.getTargetPrice(); // Assuming Product has a getTargetPrice() method
            }
        }
        return price;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboManageMarkets;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtCustomerChannel;
    // End of variables declaration//GEN-END:variables
}
