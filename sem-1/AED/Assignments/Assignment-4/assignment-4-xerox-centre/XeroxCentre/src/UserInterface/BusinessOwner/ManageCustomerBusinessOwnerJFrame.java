/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UserInterface.BusinessOwner;

import DataManagement.DataManager;
import TheBusiness.Personnel.Customer;
import java.awt.Color;
import java.awt.Point;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.table.DefaultTableModel;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author mac
 */
public class ManageCustomerBusinessOwnerJFrame extends javax.swing.JFrame {
    
    javax.swing.JFrame parentFrame;

    /**
     * Creates new form ManageCustomerBusinessOwnerJFrame
     * @param parentFrame
     */
    public ManageCustomerBusinessOwnerJFrame(javax.swing.JFrame parentFrame) {
        this.parentFrame = parentFrame;
        initComponents();
        Color lightBlue = new Color(173, 216, 230);
        getContentPane().setBackground(lightBlue);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE); // Set close operation
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                loadParentFrame();
            }
        });
        
        loadDataInTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblManageCustomer = new javax.swing.JTable();
        lblTitle = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnMetrics = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblManageCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "Customer Name", "Total Orders"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblManageCustomer);

        lblTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Manage Customers");

        btnBack.setText("<- Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnMetrics.setText("Metrics");
        btnMetrics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMetricsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(244, 244, 244))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnMetrics)
                .addGap(60, 60, 60))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnMetrics)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        loadParentFrame();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnMetricsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMetricsActionPerformed
        // TODO add your handling code here:
        // Create a dataset for the top 5 customers based on the number of orders
        CategoryDataset topCustomersDataset = createTopCustomersDataset();
        // Display the graph in a new frame
        new TopCustomersChartFrame(topCustomersDataset);
    }//GEN-LAST:event_btnMetricsActionPerformed

    /**
     * @param args the command line arguments
     */
    
      private void loadParentFrame() {
        Point myPosition = getLocation();
        this.parentFrame.setLocation(myPosition);
        this.parentFrame.setVisible(true);
        this.dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnMetrics;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblManageCustomer;
    // End of variables declaration//GEN-END:variables

    private void loadDataInTable() {
        // Get the default table model
        DefaultTableModel model = (DefaultTableModel) tblManageCustomer.getModel();

        // Clear existing rows in the table
        model.setRowCount(0);

        // Iterate through the customer directory
        for (Customer customer : DataManager.customerDirectory.values()) {
            int customerId = customer.getPersonId();
            String customerName = DataManager.personDirectory.get(customerId).getName();
            int totalOrders = customer.getOldOrderIds().size() + customer.getOngoingOrderIds().size();

            // Add a new row to the table
            model.addRow(new Object[]{customerId, customerName, totalOrders});
        }
    }
    
    private CategoryDataset createTopCustomersDataset() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        try {
            // Create a map to store the total number of orders for each customer
            Map<Integer, Integer> customerOrderMap = new HashMap<>();

            // Populate the map
            DataManager.customerDirectory.values().forEach(customer -> {
                int totalOrders = customer.getOldOrderIds().size() + customer.getOngoingOrderIds().size();
                customerOrderMap.put(customer.getPersonId(), totalOrders);
            });

            // Sort the map in descending order based on the number of orders
            List<Map.Entry<Integer, Integer>> sortedEntries = customerOrderMap.entrySet()
                    .stream()
                    .sorted(Map.Entry.<Integer, Integer>comparingByValue().reversed())
                    .collect(Collectors.toList());

            // Select the top 5 customers
            List<Map.Entry<Integer, Integer>> topEntries = sortedEntries.stream().limit(5).collect(Collectors.toList());

            for (Map.Entry<Integer, Integer> entry : topEntries) {
                int customerId = entry.getKey();
                int totalOrders = entry.getValue();

                System.out.println("Customer ID: " + customerId + ", Total Orders: " + totalOrders);

                dataset.addValue(totalOrders, "Number of Orders", String.valueOf(customerId));
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return dataset;
    }
}
