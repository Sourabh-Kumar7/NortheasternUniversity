/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.Customer;

import DataManagement.DataManager;
import OrderManagement.Order;
import ProductManagement.Product;
import TheBusiness.MarketModel.Bundle;
import TheBusiness.Personnel.Customer;
import java.awt.Color;
import java.awt.Point;
import java.util.Set;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nidhisamarth
 */

public class ManageOrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageOrderJPanel
     */
    javax.swing.JFrame parentFrame;
    Customer customer;
    public ManageOrderJPanel(JFrame parentFrame, Customer customer) {
        this.customer = customer;
        this.parentFrame = parentFrame;
        initComponents();
        Color lightBlue = new Color(173, 216, 230);
        setBackground(lightBlue);
        loadOrders();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnViewOrder = new javax.swing.JButton();
        lblManageOrders = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Bundle ID", "Bundle Name", "Price Quoted"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        btnViewOrder.setText("View Order");
        btnViewOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewOrderActionPerformed(evt);
            }
        });

        lblManageOrders.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        lblManageOrders.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblManageOrders.setText("Manage Order");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(252, 252, 252)
                        .addComponent(lblManageOrders, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 616, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnViewOrder, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(lblManageOrders, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnViewOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewOrderActionPerformed
        // Get the selected order's ID from the table (with error handling)
        int selectedOrderId = getSelectedOrderIdFromTable();

        if (selectedOrderId != -1) {
            // Retrieve the selected order from your data (you need to implement this)
            Order selectedOrder = DataManager.masterOrderList.get(selectedOrderId);

            if (selectedOrder != null) {
                Point parentFramePosition = this.parentFrame.getLocation();
                this.parentFrame.setVisible(false);

                // Create and show the ViewOrderJFrame
                ViewOrderJFrame viewOrderPortal = new ViewOrderJFrame(this.parentFrame, selectedOrder);
                viewOrderPortal.setLocation(parentFramePosition);
                viewOrderPortal.setVisible(true);
            } else {
                // Handle the case where the selected order was not found
                JOptionPane.showMessageDialog(this, "Selected order not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Handle the case where no order was selected
            JOptionPane.showMessageDialog(this, "Please select an order to view.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnViewOrderActionPerformed
    
    // Implement a method to get the selected order's ID from the table
    private int getSelectedOrderIdFromTable() {
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow != -1) {
            // Assuming the order ID is in the first column of the table (adjust if needed)
            Object selectedOrderIdObj = jTable1.getValueAt(selectedRow, 0);

            if (selectedOrderIdObj instanceof Integer integer) {
                return integer;
            }
        }

        // Return -1 if no valid order ID was found
        return -1;
    }
    private void loadOrders() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear existing rows

        // Retrieve customer's ongoing order IDs
        for (Integer orderId : customer.getOngoingOrderIds()) {
            Order order = DataManager.masterOrderList.get(orderId);
            if (order != null) {
                int bundleId = order.getBundleId();
                Bundle bundle = DataManager.bundleCatalog.get(bundleId);

                if (bundle != null) {
                    String bundleName = bundle.getName();
                    double price = calculatePrice(order); // Calculate the price as needed

                    model.addRow(new Object[]{
                        order.getId(),
                        bundleId,
                        bundleName,
                        price
                    });
                }
            }
        }
    }
    
    private double calculatePrice(Order order) {
    int bundleId = order.getBundleId();
    Bundle bundle = DataManager.bundleCatalog.get(bundleId);

    // Check if the bundle exists
    if (bundle != null) {
        double totalPrice = 0.0;

        // Get the product IDs included in the bundle
        Set<Integer> productIds = bundle.getProductIds();

        // Iterate through the product IDs and calculate the total price
        for (Integer productId : productIds) {
            Product product = DataManager.productCatalog.get(productId);

            // Check if the product exists and has a price
            if (product != null && product.getCeilingPrice() > 0) {
                // Add the product's price to the total price
                totalPrice += product.getCeilingPrice();
            }
        }

        // You can apply any additional pricing logic here if needed

        return totalPrice;
    }

    // Return 0.0 if the bundle is not found or has no products
    return 0.0;
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnViewOrder;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblManageOrders;
    // End of variables declaration//GEN-END:variables
}
