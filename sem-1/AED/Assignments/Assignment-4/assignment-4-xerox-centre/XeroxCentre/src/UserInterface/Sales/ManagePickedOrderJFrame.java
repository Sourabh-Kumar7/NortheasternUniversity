/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UserInterface.Sales;

import DataManagement.DataManager;
import OrderManagement.Order;
import TheBusiness.Personnel.SalesPerson;
import java.awt.Color;
import java.awt.Point;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sourabhkumar
 */
public class ManagePickedOrderJFrame extends javax.swing.JFrame {

    /**
     * Creates new form ManagePickedOrderJFrame
     * @param parentFrame
     */
    javax.swing.JFrame parentFrame;
    SalesPerson salesPerson;
    public ManagePickedOrderJFrame(JFrame parentFrame, SalesPerson salesPerson) {
        this.parentFrame = parentFrame;
        this.salesPerson = salesPerson;
        initComponents();
        loadData();
        Color lightBlue = new Color(173, 216, 230);
        getContentPane().setBackground(lightBlue);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE); // Set close operation
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                loadParentFrame();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPickedOrder = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        btnDrop = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Picked Order");

        tblPickedOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Selling Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPickedOrder);

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnDrop.setText("Drop");
        btnDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDropActionPerformed(evt);
            }
        });

        btnBack.setText("<- Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDrop)
                        .addGap(46, 46, 46)
                        .addComponent(btnView))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(236, 236, 236))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(btnBack)))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDrop))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnBack, btnDrop, btnView});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        loadParentFrame();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // Get the selected order's ID from the table (with error handling)
        int selectedRowIndex = tblPickedOrder.getSelectedRow();

        if (selectedRowIndex != -1) {
            // Retrieve the selected order from your data (you need to implement this)
            int selectedOrderId = (int) tblPickedOrder.getValueAt(selectedRowIndex, 0);
            Order selectedOrder = DataManager.masterOrderList.get(selectedOrderId);

            if (selectedOrder != null) {
                Point parentFramePosition = this.getLocation();
                this.setVisible(false);

                // Open the ViewOrderJFrame
                ViewOrderJFrame viewOrderPortal = new ViewOrderJFrame(this, selectedOrder, this.salesPerson);
                viewOrderPortal.setLocation(parentFramePosition);
                viewOrderPortal.setVisible(true);

                // Add a window listener to refresh the table when ViewOrderJFrame is closed
                viewOrderPortal.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent e) {
                        loadData(); // Refresh the table data when ViewOrderJFrame is closed
                        setVisible(true); // Show ManagePickedOrderJFrame again
                    }
                });
            } else {
                // Handle the case where the selected order was not found
                JOptionPane.showMessageDialog(this, "Selected order not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Handle the case where no order was selected
            JOptionPane.showMessageDialog(this, "Please select an order to view.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDropActionPerformed
        // TODO add your handling code here:
        // Get the selected row index
        int selectedRowIndex = tblPickedOrder.getSelectedRow();

        // Check if a row is selected
        if (selectedRowIndex == -1) {
            // No row is selected, show an error message
            JOptionPane.showMessageDialog(this, "Please select an order to drop.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get the Order ID from the selected row
        int orderId = (int) tblPickedOrder.getValueAt(selectedRowIndex, 0);
        // Get the Order from DataManager using the Order ID
        Order orderToPick = DataManager.masterOrderList.get(orderId);
        orderToPick.setSalesPersonId(-1);
        this.salesPerson.removePickedUpOrderId(orderId);

        // Show a success message
        JOptionPane.showMessageDialog(this, "Order removed successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

        // Refresh the table to remove the picked order
        loadData();
    }//GEN-LAST:event_btnDropActionPerformed
    
    private void loadParentFrame(){
        Point myPosition = getLocation();
        this.parentFrame.setLocation(myPosition);
        this.parentFrame.setVisible(true);
        this.dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDrop;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPickedOrder;
    // End of variables declaration//GEN-END:variables

    private void loadData() {
        // Get the Order IDs picked up by the SalesPerson
        ArrayList<Integer> pickedUpOrderIds = salesPerson.getPickedUpOrderIds();

        // Get the table model
        DefaultTableModel model = (DefaultTableModel) tblPickedOrder.getModel();

        // Clear existing rows
        model.setRowCount(0);

        // Iterate through the picked up Order IDs
        for (int orderId : pickedUpOrderIds) {
            // Get the Order from DataManager using the Order ID
            Order order = DataManager.masterOrderList.get(orderId);

            // Check if the order exists (not null)
            if (order != null) {
                // Add the order details to the table
                Object[] rowData = {order.getId(), order.getSellingPrice()};
                model.addRow(rowData);
            }
        }
    }
}
