/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UserInterface.BusinessOwner;

import DataManagement.DataManager;
import TheBusiness.MarketModel.Bundle;
import TheBusiness.MarketModel.Market;
import java.awt.Color;
import java.awt.Point;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mac
 */
public class ManageMarketingBusinessOwnerJFrame extends javax.swing.JFrame {

    
    javax.swing.JFrame parentFrame;
    /**
     * Creates new form ManageMarketingBusinessOwnerJFrame
     */
    public ManageMarketingBusinessOwnerJFrame(javax.swing.JFrame parentFrame) {
        this.parentFrame = parentFrame;
        initComponents();
        Color lightBlue = new Color(173, 216, 230);
        getContentPane().setBackground(lightBlue);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE); // Set close operation
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                loadParentFrame();
            }
        });
        refreshTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblManageMarket = new javax.swing.JTable();
        btnMarketMetrics = new javax.swing.JButton();
        btnTopBundlesMetrics = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Manage Market");

        btnBack.setText("<- Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        tblManageMarket.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Market ID", "Market Name", "Total Sales", "Total Profit"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblManageMarket);

        btnMarketMetrics.setText("View Top Market Metrics");
        btnMarketMetrics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMarketMetricsActionPerformed(evt);
            }
        });

        btnTopBundlesMetrics.setText("View Top Solution Metrics");
        btnTopBundlesMetrics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTopBundlesMetricsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnTopBundlesMetrics))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnMarketMetrics, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnMarketMetrics, btnTopBundlesMetrics});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 30, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnTopBundlesMetrics, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMarketMetrics)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnMarketMetrics, btnTopBundlesMetrics});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        loadParentFrame();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnMarketMetricsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarketMetricsActionPerformed
        // Get the top 5 markets by profit
        List<Market> topMarkets = getTopMarketsByProfit(5);
        // Open a new frame to display the chart
        new TopMarketsChartFrame(topMarkets);
    }//GEN-LAST:event_btnMarketMetricsActionPerformed

    private void btnTopBundlesMetricsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTopBundlesMetricsActionPerformed
        // TODO add your handling code here:
        // Get the top N bundle IDs above target percentage
        List<Integer> topBundleIds = getTopBundleIdsAboveTargetPercentage(5);

        // Get the corresponding bundles
        List<Bundle> topBundles = topBundleIds.stream()
                .map(bundleId -> DataManager.bundleCatalog.get(bundleId))
                .collect(Collectors.toList());

        // Open a new frame to display the chart
        new TopBundlesChartFrame(topBundles).setVisible(true);
    }//GEN-LAST:event_btnTopBundlesMetricsActionPerformed

    /**
     * @param args the command line arguments
     */

    // Method to get the top N markets by profit   
    private List<Market> getTopMarketsByProfit(int topN) {
        List<Market> allMarkets = new ArrayList<>(DataManager.marketCatalog.values());
        // Sort markets by profit in descending order
        allMarkets.sort((m1, m2) -> Double.compare(m2.getTotalProfit(), m1.getTotalProfit()));
        // Get the top N markets
        return allMarkets.subList(0, Math.min(topN, allMarkets.size()));
    }
    
    private void loadParentFrame() {
        Point myPosition = getLocation();
        this.parentFrame.setLocation(myPosition);
        this.parentFrame.setVisible(true);
        this.dispose();
    }
    
    private List<Integer> getTopBundleIdsAboveTargetPercentage(int topN) {
        List<Bundle> allBundles = new ArrayList<>(DataManager.bundleCatalog.values());

        // Calculate the percentage above target for each bundle and store in a map
        Map<Integer, Double> bundleIdToPercentage = allBundles.stream()
                .collect(Collectors.toMap(Bundle::getId, bundle -> {
                    double percentageAboveTarget = (bundle.getHighestSellingPrice() - bundle.getTargetPrice()) / bundle.getTargetPrice() * 100;
                    return percentageAboveTarget;
                }));

        // Sort the map by percentage above target in descending order
        List<Map.Entry<Integer, Double>> sortedBundleList = bundleIdToPercentage.entrySet().stream()
                .sorted((entry1, entry2) -> Double.compare(entry2.getValue(), entry1.getValue()))
                .collect(Collectors.toList());

        // Get the top N bundle IDs
        List<Integer> topBundleIds = sortedBundleList.stream()
                .map(Map.Entry::getKey)
                .limit(topN)
                .collect(Collectors.toList());

        return topBundleIds;
    }

    
    private void refreshTable() {
        DefaultTableModel model = (DefaultTableModel) tblManageMarket.getModel();
        model.setRowCount(0); // Clear existing rows

        for (Market market : DataManager.marketCatalog.values()) {
            int marketId = market.getId();
            String marketName = market.getName();
            int totalSales = market.getTotalSales();
            double totalProfit = Math.round(market.getTotalProfit() * 100.0) / 100.0;

            model.addRow(new Object[]{marketId, marketName, totalSales, totalProfit});
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnMarketMetrics;
    private javax.swing.JButton btnTopBundlesMetrics;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblManageMarket;
    // End of variables declaration//GEN-END:variables
}
